<div class="min-h-[300px] flex-3/4 rounded-lg border bg-gray-50 p-4">
  <h2 class="mb-2 text-lg font-bold">Workflow</h2>

  <div id="workflow-drop" class="space-y-2">
    <!-- Dropzone will render items here -->
  </div>
</div>

<script>
  import Sortable from 'sortablejs'

  const dropzone = document.getElementById('workflow-drop')

  Sortable.create(dropzone, {
    group: { name: 'workflow', pull: true, put: true },
    animation: 150,
    onAdd: function (evt) {
      const data = JSON.parse(evt.item.dataset.block)
      const newEl = document.createElement('div')
      newEl.className = `p-2 border rounded-md bg-white flex flex-col gap-1 ${data.className}`

      const header = document.createElement('div')
      header.className = 'flex items-center gap-2 font-medium'
      header.innerHTML = `<span>${data.name}</span>`

      const inputArea = document.createElement('div')
      inputArea.className = 'flex gap-2 flex-wrap text-sm'
      data.args.forEach((arg) => {
        const input = document.createElement('input')
        input.placeholder = arg
        input.className = 'border px-2 py-1 rounded text-xs'
        inputArea.appendChild(input)
      })

      newEl.appendChild(header)
      newEl.appendChild(inputArea)
      evt.item.replaceWith(newEl)
    },
  })

  // Enable dragging from source with extra data
  document.querySelectorAll('[draggable=true]').forEach((el) => {
    el.addEventListener('dragstart', (e) => {
      const block = {
        name: el.querySelector('span')?.innerText || '',
        className: el.className || '',
        args: [], // Optional: set args if needed again
      }
      const existingData = el.getAttribute('data-block')
      if (!existingData) {
        e.dataTransfer.setData('application/json', JSON.stringify(block))
      }
    })
  })
</script>
