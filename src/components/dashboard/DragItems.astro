---
import {
  MousePointerClick,
  Scroll,
  Move,
  Type,
  Image,
  Moon,
  CircleQuestionMark,
} from '@lucide/astro'

const data = [
  {
    name: 'Click',
    icon: MousePointerClick,
    value: 'click',
    args: [],
    className: 'block-action bg-blue-200 text-blue-700 text-blue-900',
  },
  {
    name: 'Scroll (screen height)px',
    icon: Scroll,
    value: 'scroll',
    args: ['height'],
    className: 'block-action bg-purple-200 text-purple-700 text-purple-900',
  },
  {
    name: 'Move Cursor (x, y)',
    icon: Move,
    value: 'move_cursor_xy',
    args: ['x', 'y'],
    className: 'block-move bg-green-200 text-green-700 text-green-900',
  },
  {
    name: 'Move Cursor by Text (text)',
    icon: Type,
    value: 'move_cursor_text',
    args: ['text'],
    className: 'block-text bg-yellow-200 text-yellow-700 text-yellow-900',
  },
  {
    name: 'Move Cursor(image)',
    icon: Image,
    value: 'move_cursor_image',
    args: ['image'],
    className: 'block-image bg-pink-300 text-pink-700 text-pink-900',
  },
  {
    name: 'Sleep (time)',
    icon: Moon,
    value: 'sleep',
    args: ['seconds'],
    className: 'block-sleep bg-gray-300 text-gray-700 text-gray-900',
  },
  {
    name: 'If (expression)',
    icon: CircleQuestionMark,
    value: 'if',
    args: ['expression'],
    className: 'block-conditional bg-red-300 text-red-700 text-red-900',
  },
]
---

<div class="w-1/4 space-y-2 rounded-lg border bg-white p-4" id="drag-items">
  <h2 class="text-lg font-bold">Drag Items</h2>
  {
    data.map((block) => {
      const Icon = block.icon
      return (
        <div
          class={`hover:bg-opacity-80 flex flex-col gap-1 border p-2 ${block.className}`}
          draggable="true"
          data-block={JSON.stringify(block)}
          data-draggable
        >
          <div class="flex items-center gap-2">
            <Icon class="h-4 w-4" />
            <span>{block.name}</span>
          </div>

          {block.args.length > 0 && (
            <div class="mt-1 space-y-1">
              {block.args.map((arg) => (
                <input
                  type="text"
                  placeholder={arg}
                  class="w-full rounded border px-2 py-1 text-sm"
                />
              ))}
            </div>
          )}

          {block.value === 'if' && (
            <div
              class="mt-2 ml-4 rounded border border-dashed p-2"
              data-nested-if
            >
              <span class="text-xs">If True:</span>
              <div class="nested-dropzone min-h-[40px] space-y-2" />
            </div>
          )}
        </div>
      )
    })
  }
</div>

<script>
  import { Sortable } from 'sortablejs'

  let left = document.getElementById('drag-items')

  new Sortable(left, {
    group: {
      name: 'shared',
      pull: 'clone',
      put: false,
    },
    animation: 150,
  })

  const initNestedSortables = () => {
    document.querySelectorAll('.nested-dropzone').forEach((el) => {
      new Sortable(el, {
        group: 'shared',
        animation: 150,
        fallbackOnBody: true,
        swapThreshold: 0.65,
      })
    })
  }

  window.addEventListener('DOMContentLoaded', initNestedSortables)
</script>
